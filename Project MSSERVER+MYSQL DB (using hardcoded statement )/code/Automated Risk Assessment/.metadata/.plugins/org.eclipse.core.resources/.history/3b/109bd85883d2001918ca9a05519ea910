package com.hit.sapiens.riskassessment.ui;

import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.JTable;
import com.hit.sapiens.riskassessment.beans.Antivirus;
import com.hit.sapiens.riskassessment.beans.AntivirusCategory;
import com.hit.sapiens.riskassessment.beans.RiskEvent;
import com.hit.sapiens.riskassessment.dao.AntivirusDAO;
import com.hit.sapiens.riskassessment.dao.DBSystem;

import javax.swing.JScrollPane;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;
import java.awt.event.ActionEvent;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.UIManager;
import javax.swing.border.TitledBorder;
import javax.swing.JList;
import java.awt.Color;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.JLabel;
import javax.swing.border.EtchedBorder;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import java.awt.Font;
import javax.swing.event.ListSelectionListener;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;
import javax.swing.event.ListSelectionEvent;
import java.awt.SystemColor;
import java.awt.Toolkit;
import javax.swing.JSeparator;
import javax.swing.border.EmptyBorder;

public class RiskAssessmentApp {

	private AntivirusDAO antivirusDAO;
	private Map<String, Antivirus> antivirusEvents;
	private JFrame framRisk;
	private JList<String> listRisksUsers;
	private JLabel lblDbStatusAntiTab;
	private JLabel lblDbStatusStatTab;
	private JTable tableDetails;
	private JLabel lblCountMalware;
	private JLabel lblCountVirus;
	private JLabel lblShowUserSelected;
	private JLabel labelVirusAmountStat;
	private JLabel labelMalwareAmountStat;
	private JPanel panelPieChart;
	private JLabel lblServerLoginStat;
	private JLabel lblServerLoginAntivirus;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					RiskAssessmentApp window = new RiskAssessmentApp();
					window.framRisk.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public RiskAssessmentApp() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		framRisk = new JFrame();
		framRisk.setIconImage(
				Toolkit.getDefaultToolkit().getImage(RiskAssessmentApp.class.getResource("/antivirus-icon.png")));
		framRisk.setTitle("Automated Risk Assessment");
		framRisk.setResizable(false);
		framRisk.setBounds(100, 100, 800, 600);
		framRisk.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		framRisk.setLocationRelativeTo(null);

		JMenuBar menuBar = new JMenuBar();
		framRisk.setJMenuBar(menuBar);

		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);

		JMenu mnFromDB = new JMenu("Load From DB...");
		mnFromDB.setIcon(new ImageIcon(
				RiskAssessmentApp.class.getResource("/javax/swing/plaf/metal/icons/ocean/hardDrive.gif")));
		mnFile.add(mnFromDB);

		JMenu mnMysql = new JMenu("MySQL");
		mnFromDB.add(mnMysql);

		JMenuItem mntmAntivirusMySql = new JMenuItem("Antivirus Table");
		mnMysql.add(mntmAntivirusMySql);
		mntmAntivirusMySql.setIcon(new ImageIcon(
				RiskAssessmentApp.class.getResource("/com/sun/java/swing/plaf/windows/icons/DetailsView.gif")));

		JMenu mnMSSQL = new JMenu("MSSQL Server");
		mnFromDB.add(mnMSSQL);

		JMenuItem mntmAntivirusMsSql = new JMenuItem("Antivirus Table");
		mntmAntivirusMsSql.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				loadDataFromDB(DBSystem.MSSQLSERVER);
			}
		});
		mntmAntivirusMsSql.setIcon(new ImageIcon(
				RiskAssessmentApp.class.getResource("/com/sun/java/swing/plaf/windows/icons/DetailsView.gif")));
		mnMSSQL.add(mntmAntivirusMsSql);
		mntmAntivirusMySql.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				loadDataFromDB(DBSystem.MYSQL);
			}
		});

		JMenu mnFromFile = new JMenu("Load From File...");
		mnFromFile.setIcon(new ImageIcon(
				RiskAssessmentApp.class.getResource("/com/sun/java/swing/plaf/windows/icons/NewFolder.gif")));
		mnFile.add(mnFromFile);

		JMenuItem mntmFaltDbCsv = new JMenuItem(".CSV File");
		mntmFaltDbCsv.setIcon(
				new ImageIcon(RiskAssessmentApp.class.getResource("/com/sun/java/swing/plaf/windows/icons/File.gif")));
		mnFromFile.add(mntmFaltDbCsv);

		JMenuItem mntmExit = new JMenuItem("Exit");
		mntmExit.setIcon(
				new ImageIcon(RiskAssessmentApp.class.getResource("/javax/swing/plaf/metal/icons/ocean/maximize.gif")));
		mntmExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(JFrame.EXIT_ON_CLOSE);
			}
		});
		mnFile.add(mntmExit);

		JMenu mnTools = new JMenu("Tools");
		menuBar.add(mnTools);

		JMenuItem mntmOptions = new JMenuItem("Options");
		mntmOptions.setIcon(
				new ImageIcon(RiskAssessmentApp.class.getResource("/javax/swing/plaf/metal/icons/ocean/computer.gif")));
		mnTools.add(mntmOptions);

		JMenu mnHelp = new JMenu("Help");
		menuBar.add(mnHelp);

		JMenuItem mntmAbout = new JMenuItem("About Automated Risk Assessment");
		mntmAbout.setIcon(new ImageIcon(RiskAssessmentApp.class.getResource("/Actions-help-about-icon.png")));
		mnHelp.add(mntmAbout);

		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		tabbedPane.setBorder(new SoftBevelBorder(BevelBorder.RAISED, null, null, null, null));
		framRisk.getContentPane().add(tabbedPane, BorderLayout.CENTER);

		JPanel panelStatistics = new JPanel();
		tabbedPane.addTab("Statistics", new ImageIcon(RiskAssessmentApp.class.getResource("/chart-icon.png")),
				panelStatistics, null);
		panelStatistics.setLayout(null);
		panelStatistics.setLayout(null);

		JPanel panelRiskScore = new JPanel();
		panelRiskScore.setForeground(Color.DARK_GRAY);
		panelRiskScore.setLayout(null);
		panelRiskScore.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		panelRiskScore.setBounds(0, 0, 783, 488);
		panelStatistics.add(panelRiskScore);

		JLabel lblRiskScore = new JLabel("Risk Score");
		lblRiskScore.setForeground(new Color(128, 0, 128));
		lblRiskScore.setFont(new Font("Tahoma", Font.BOLD, 25));
		lblRiskScore.setBounds(10, 11, 160, 36);
		panelRiskScore.add(lblRiskScore);

		JSeparator separatorRiskScore = new JSeparator();
		separatorRiskScore.setBounds(10, 57, 763, 13);
		panelRiskScore.add(separatorRiskScore);

		JPanel panelBuisnessRisk = new JPanel();
		panelBuisnessRisk.setBorder(new EmptyBorder(0, 0, 0, 0));
		panelBuisnessRisk.setBounds(110, 81, 400, 125);
		panelRiskScore.add(panelBuisnessRisk);
		panelBuisnessRisk.setLayout(null);

		JLabel lblAmountStat = new JLabel("Amount");
		lblAmountStat.setBounds(10, 11, 73, 36);
		panelBuisnessRisk.add(lblAmountStat);
		lblAmountStat.setFont(new Font("Tahoma", Font.PLAIN, 18));

		JLabel lblBuisnessRisk = new JLabel("Buisness Risk");
		lblBuisnessRisk.setBounds(240, 11, 120, 36);
		panelBuisnessRisk.add(lblBuisnessRisk);
		lblBuisnessRisk.setFont(new Font("Tahoma", Font.PLAIN, 18));

		JSeparator separatorBuisnessRisk = new JSeparator();
		separatorBuisnessRisk.setBounds(10, 46, 380, 13);
		panelBuisnessRisk.add(separatorBuisnessRisk);

		JLabel lblVirusStat = new JLabel("Virus");
		lblVirusStat.setForeground(new Color(220, 20, 60));
		lblVirusStat.setBounds(250, 62, 85, 14);
		panelBuisnessRisk.add(lblVirusStat);
		lblVirusStat.setFont(new Font("Tahoma", Font.BOLD, 18));

		labelVirusAmountStat = new JLabel("0");
		labelVirusAmountStat.setForeground(new Color(0, 0, 0));
		labelVirusAmountStat.setBounds(25, 62, 85, 14);
		panelBuisnessRisk.add(labelVirusAmountStat);
		labelVirusAmountStat.setFont(new Font("Tahoma", Font.BOLD, 18));

		JLabel lblMalwareStat = new JLabel("Malware");
		lblMalwareStat.setForeground(new Color(65, 105, 225));
		lblMalwareStat.setBounds(250, 100, 85, 14);
		panelBuisnessRisk.add(lblMalwareStat);
		lblMalwareStat.setFont(new Font("Tahoma", Font.BOLD, 18));

		labelMalwareAmountStat = new JLabel("0");
		labelMalwareAmountStat.setForeground(new Color(0, 0, 0));
		labelMalwareAmountStat.setBounds(25, 100, 85, 14);
		panelBuisnessRisk.add(labelMalwareAmountStat);
		labelMalwareAmountStat.setFont(new Font("Tahoma", Font.BOLD, 18));

		panelPieChart = new JPanel();
		panelPieChart.setForeground(UIManager.getColor("Button.background"));
		panelPieChart.setBounds(200, 230, 355, 245);
		panelRiskScore.add(panelPieChart);
		panelPieChart.setBorder(new EmptyBorder(0, 0, 0, 0));
		panelPieChart.setBackground(UIManager.getColor("Button.background"));

		lblDbStatusStatTab = new JLabel("Offline");
		lblDbStatusStatTab.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblDbStatusStatTab.setForeground(Color.RED);
		lblDbStatusStatTab.setBounds(735, 492, 45, 14);
		panelStatistics.add(lblDbStatusStatTab);

		JLabel lblDBConnectionStat = new JLabel("Database Connection:");
		lblDBConnectionStat.setHorizontalAlignment(SwingConstants.TRAILING);
		lblDBConnectionStat.setFont(new Font("Tahoma", Font.PLAIN, 11));
		lblDBConnectionStat.setBounds(600, 492, 130, 14);
		panelStatistics.add(lblDBConnectionStat);

		JLabel lblLoginStat = new JLabel("Server:");
		lblLoginStat.setForeground(new Color(0, 0, 0));
		lblLoginStat.setFont(new Font("Tahoma", Font.PLAIN, 11));
		lblLoginStat.setBounds(475, 492, 45, 14);
		panelStatistics.add(lblLoginStat);

		lblServerLoginStat = new JLabel("");
		lblServerLoginStat.setBounds(517, 492, 90, 14);
		panelStatistics.add(lblServerLoginStat);

		JPanel panelAntivirus = new JPanel();
		tabbedPane.addTab("Antivirus", new ImageIcon(RiskAssessmentApp.class.getResource("/antivirusTab.png")),
				panelAntivirus, null);
		panelAntivirus.setLayout(null);

		JLabel lblDBConnectionAntivirus = new JLabel("Database Connection:");
		lblDBConnectionAntivirus.setHorizontalAlignment(SwingConstants.TRAILING);
		lblDBConnectionAntivirus.setFont(new Font("Tahoma", Font.PLAIN, 11));
		lblDBConnectionAntivirus.setBounds(600, 492, 130, 14);
		panelAntivirus.add(lblDBConnectionAntivirus);

		JPanel panelRisk = new JPanel();
		panelRisk.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		panelRisk.setBounds(0, 0, 783, 488);
		panelAntivirus.add(panelRisk);
		panelRisk.setLayout(null);

		JPanel panelUserRisk = new JPanel();
		panelUserRisk.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "Users:",
				TitledBorder.LEADING, TitledBorder.TOP, null, Color.GRAY));
		panelUserRisk.setBounds(611, 101, 162, 375);
		panelRisk.add(panelUserRisk);
		panelUserRisk.setLayout(null);

		JScrollPane scrollPaneUsers = new JScrollPane();
		scrollPaneUsers.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPaneUsers.setBounds(10, 22, 144, 342);
		panelUserRisk.add(scrollPaneUsers);

		listRisksUsers = new JList<>();
		listRisksUsers.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent arg0) {
				if (antivirusEvents != null) {
					updateLabels(lblCountMalware, lblShowUserSelected, "Malware");
					updateLabels(lblCountVirus, lblShowUserSelected, "Security risk");
				} else {
					JOptionPane.showMessageDialog(framRisk, "Error: No DB / File has been received for import",
							"Loading Error", JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		scrollPaneUsers.setViewportView(listRisksUsers);
		listRisksUsers.setForeground(UIManager.getColor("List.foreground"));
		listRisksUsers.setBackground(UIManager.getColor("List.background"));

		JPanel panelDetails = new JPanel();
		panelDetails.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "Details:",
				TitledBorder.LEADING, TitledBorder.TOP, null, Color.GRAY));
		panelDetails.setBounds(16, 101, 588, 377);
		panelRisk.add(panelDetails);
		panelDetails.setLayout(null);

		JScrollPane scrollPaneDetails = new JScrollPane();
		scrollPaneDetails.setBounds(6, 16, 572, 350);
		panelDetails.add(scrollPaneDetails);

		tableDetails = new JTable();
		tableDetails.setAutoCreateRowSorter(true);
		scrollPaneDetails.setViewportView(tableDetails);

		final RiskRowPopup pop = new RiskRowPopup(tableDetails);

		tableDetails.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent mouseEvent) {
				if (SwingUtilities.isLeftMouseButton(mouseEvent)) {
					pop.show(mouseEvent.getComponent(), mouseEvent.getX(), mouseEvent.getY());
				}
			}
		});

		JPanel panelUserChoosen = new JPanel();
		panelUserChoosen.setBackground(SystemColor.scrollbar);
		panelUserChoosen.setBorder(new EtchedBorder(EtchedBorder.RAISED, null, null));
		panelUserChoosen.setBounds(16, 33, 588, 62);
		panelRisk.add(panelUserChoosen);
		panelUserChoosen.setLayout(null);

		JButton btnShowDetails = new JButton("Show Details");
		btnShowDetails.setForeground(new Color(0, 0, 0));
		btnShowDetails.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (antivirusEvents != null) {
					Antivirus antivirus = antivirusDAO.getAntivirusByUser(listRisksUsers.getSelectedValue());
					fetchEventsToDetailsTable(tableDetails, antivirus.getRiskEvents());

				} else {
					JOptionPane.showMessageDialog(framRisk, "Error: No DB / File has been received for import",
							"Loading Error", JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		btnShowDetails.setFont(new Font("Tahoma", Font.BOLD, 12));
		btnShowDetails.setBounds(234, 2, 120, 59);
		panelUserChoosen.add(btnShowDetails);

		JPanel panelMalware = new JPanel();
		panelMalware.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		panelMalware.setBounds(26, 11, 193, 40);
		panelUserChoosen.add(panelMalware);
		panelMalware.setLayout(null);

		JLabel lblMalware = new JLabel("Malware:");
		lblMalware.setForeground(new Color(65, 105, 225));
		lblMalware.setBounds(10, 0, 100, 40);
		panelMalware.add(lblMalware);
		lblMalware.setFont(new Font("Tahoma", Font.BOLD, 20));

		lblCountMalware = new JLabel("");
		lblCountMalware.setHorizontalAlignment(SwingConstants.TRAILING);
		lblCountMalware.setBounds(105, 0, 75, 40);
		panelMalware.add(lblCountMalware);
		lblCountMalware.setFont(new Font("Tahoma", Font.PLAIN, 20));

		JPanel panelVIrus = new JPanel();
		panelVIrus.setLayout(null);
		panelVIrus.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		panelVIrus.setBounds(369, 11, 193, 40);
		panelUserChoosen.add(panelVIrus);

		JLabel lblVirus = new JLabel("Virus:");
		lblVirus.setForeground(new Color(220, 20, 60));
		lblVirus.setFont(new Font("Tahoma", Font.BOLD, 20));
		lblVirus.setBounds(10, 0, 100, 40);
		panelVIrus.add(lblVirus);

		lblCountVirus = new JLabel("");
		lblCountVirus.setHorizontalAlignment(SwingConstants.TRAILING);
		lblCountVirus.setFont(new Font("Tahoma", Font.PLAIN, 20));
		lblCountVirus.setBounds(105, 0, 75, 40);
		panelVIrus.add(lblCountVirus);

		lblShowUserSelected = new JLabel("");
		lblShowUserSelected.setForeground(new Color(0, 0, 255));
		lblShowUserSelected.setHorizontalAlignment(SwingConstants.CENTER);
		lblShowUserSelected.setFont(new Font("Tahoma", Font.PLAIN, 18));
		lblShowUserSelected.setBounds(180, 7, 260, 25);
		panelRisk.add(lblShowUserSelected);

		JButton btnNewButton = new JButton("Show All Events");
		btnNewButton.setForeground(new Color(0, 128, 0));
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (antivirusEvents != null) {
					fetchEventsToDetailsTable(tableDetails, getAllRiskEvents());
				} else {
					JOptionPane.showMessageDialog(framRisk, "Error: No DB / File has been received for import",
							"Loading Error", JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		btnNewButton.setBounds(614, 33, 159, 62);
		panelRisk.add(btnNewButton);

		lblDbStatusAntiTab = new JLabel("Offline");
		lblDbStatusAntiTab.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblDbStatusAntiTab.setForeground(new Color(255, 0, 0));
		lblDbStatusAntiTab.setBounds(735, 492, 45, 14);
		panelAntivirus.add(lblDbStatusAntiTab);

		JLabel lblLoginAntivirus = new JLabel("Server:");
		lblLoginAntivirus.setFont(new Font("Tahoma", Font.PLAIN, 11));
		lblLoginAntivirus.setBounds(475, 492, 45, 14);
		panelAntivirus.add(lblLoginAntivirus);

		lblServerLoginAntivirus = new JLabel("");
		lblServerLoginAntivirus.setBounds(517, 492, 90, 14);
		panelAntivirus.add(lblServerLoginAntivirus);
		
		JPanel panelEmail = new JPanel();
		tabbedPane.addTab("Email", new ImageIcon(RiskAssessmentApp.class.getResource("/spam-filter-icon.png")), panelEmail, null);
	}

	void updateLabels(JLabel jAmountLabel, JLabel jUserLabel, String category) {

		String user = listRisksUsers.getSelectedValue();
		jUserLabel.setText(user);

		Antivirus antivirus = antivirusDAO.getAntivirusByUser(user);
		if (category.equals(AntivirusCategory.MALWARE.toString())) {
			jAmountLabel.setText(String.valueOf(antivirus.getAmountByCategory(AntivirusCategory.MALWARE)));
		} else {
			jAmountLabel.setText(String.valueOf(antivirus.getAmountByCategory(AntivirusCategory.VIRUS)));
		}
	}

	void fetchUsersToList(JList<String> jlist) {
		try {
			Set<String> SetUsers = antivirusDAO.getUserList();
			DefaultListModel<String> dlm = new DefaultListModel<>();

			List<String> users = new ArrayList<>(SetUsers);
			Collections.sort(users, String.CASE_INSENSITIVE_ORDER);

			for (String user : users) {
				dlm.addElement(user);
			}
			jlist.setModel(dlm);
		} catch (Exception e) {
			JOptionPane.showMessageDialog(framRisk, "Error: No DB / File has been received for import", "Loading Error",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	void fetchEventsToDetailsTable(JTable table, List<RiskEvent> riskEventsList) {
		RiskTableModel model = new RiskTableModel(riskEventsList);
		table.setModel(model);
		table.getColumnModel().getColumn(2).setPreferredWidth(320);
	}

	void loadDataFromDB(DBSystem dbSystem) {
		try {
			if (dbSystem.equals(DBSystem.MYSQL)) {
				antivirusDAO = new AntivirusDAO(DBSystem.MYSQL);
			} else {
				antivirusDAO = new AntivirusDAO(DBSystem.MSSQLSERVER);
			}
			antivirusEvents = antivirusDAO.loadRiskEventsFromDB();
			fetchEventsToDetailsTable(tableDetails, getAllRiskEvents());
			fetchUsersToList(listRisksUsers);
			lblDbStatusAntiTab.setText("Online");
			lblDbStatusAntiTab.setForeground(new Color(0, 100, 0));
			lblDbStatusStatTab.setText("Online");
			lblDbStatusStatTab.setForeground(new Color(0, 100, 0));
			
			if (dbSystem.equals(DBSystem.MYSQL)) {
				lblServerLoginStat.setText(DBSystem.MYSQL.toString());
				lblServerLoginStat.setForeground(new Color(70, 130, 180));
				lblServerLoginAntivirus.setText(DBSystem.MYSQL.toString());
				lblServerLoginAntivirus.setForeground(new Color(70, 130, 180));
			} else {
				lblServerLoginStat.setText(DBSystem.MSSQLSERVER.toString());
				lblServerLoginStat.setForeground(new Color(70, 130, 180));
				lblServerLoginAntivirus.setText(DBSystem.MSSQLSERVER.toString());
				lblServerLoginAntivirus.setForeground(new Color(70, 130, 180));
			}

			labelVirusAmountStat.setText(String.valueOf(getSumOfRiskEvents(AntivirusCategory.VIRUS)));
			labelMalwareAmountStat.setText(String.valueOf(getSumOfRiskEvents(AntivirusCategory.MALWARE)));
			creatingPieChart();

		} catch (Exception exc) {
			JOptionPane.showMessageDialog(framRisk,
					"Connection refused: Make sure that an instance of SQL Server is running on the host and accepting TCP/IP connections at the port. Make sure that TCP connections to the port are not blocked by a firewall.\nError: "
							+ exc,
					"DB Connection Error", JOptionPane.ERROR_MESSAGE);
		}
	}

	public List<RiskEvent> getAllRiskEvents() {
		List<RiskEvent> riskEvents = new ArrayList<>();

		for (Entry<String, Antivirus> entry : antivirusEvents.entrySet()) {
			for (RiskEvent riskEvent : entry.getValue().getRiskEvents()) {
				riskEvents.add(riskEvent);
			}
		}
		return riskEvents;
	}

	public int getSumOfRiskEvents(AntivirusCategory category) {
		int sumVirus = 0;

		for (Entry<String, Antivirus> entry : antivirusEvents.entrySet()) {
			if (category.equals(AntivirusCategory.MALWARE)) {
				sumVirus += entry.getValue().getAmountByCategory(AntivirusCategory.MALWARE);
			} else {
				sumVirus += entry.getValue().getAmountByCategory(AntivirusCategory.VIRUS);
			}
		}

		return sumVirus;
	}

	public void creatingPieChart() {

		Color backgroundColor = UIManager.getColor("Button.background");
		DefaultPieDataset dataset = new DefaultPieDataset();
		dataset.setValue("Virus", Double.valueOf(getSumOfRiskEvents(AntivirusCategory.VIRUS)));
		dataset.setValue("Malware", Double.valueOf(getSumOfRiskEvents(AntivirusCategory.MALWARE)));

		JFreeChart chart = ChartFactory.createPieChart3D("", dataset, false, false, false);
		chart.setBackgroundPaint(backgroundColor);
		chart.setBorderPaint(backgroundColor);

		final PiePlot3D plot = (PiePlot3D) chart.getPlot();
		plot.setBackgroundPaint(backgroundColor);
		plot.setBaseSectionOutlinePaint(new Color(0, 255, 255));
		plot.setBaseSectionPaint(backgroundColor);
		plot.setStartAngle(210);
		plot.setForegroundAlpha(0.90f);
		plot.setInteriorGap(0.02);
		plot.setOutlineVisible(false);
		plot.setShadowPaint(null);
		plot.setCircular(true);
		plot.setSectionPaint(dataset.getKey(0), new Color(220, 20, 60));
		plot.setSectionPaint(dataset.getKey(1), new Color(60, 105, 225));

		panelPieChart.setLayout(new BorderLayout());
		ChartPanel CP = new ChartPanel(chart);
		panelPieChart.add(CP, BorderLayout.CENTER);
		panelPieChart.validate();
	}
}
